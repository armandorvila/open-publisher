--Sql to startup the sata base.

create schema publisher

create table publisher.author(id INTEGER GENERATED by default as IDENTITY(START with 0) not NULL primary key,
name varchar(256),surname  varchar(256),DATEOFJOINING date)

create table publisher.article(id INTEGER GENERATED by default as IDENTITY(START with 0) not NULL primary key,
title varchar(256),dateofcreation date,author varchar(256),description  varchar(256),subject  varchar(256),filename  varchar(256),fileurl varchar(256))

create table publisher.author_article(id_author INTEGER,id_article INTEGER, foreign key (id_author) 
references author on delete cascade, foreign key (id_article) 
references article  on delete cascade) 


--Tables for security
create table publisher.users(id INTEGER GENERATED by default as IDENTITY(START with 0) not NULL primary key,
username varchar (256),password varchar(256),author_id integer,FOREIGN KEY (author_id) REFERENCES author)


-------------------------------------------------------------------------------

--Data bas creation in postgreSql

CREATE TABLE publisher.article
(
  id serial NOT NULL,
  title character varying(50),
  subject character varying DEFAULT 50,
  description character varying,
  dateofcreation date,
  filename character varying,
  fileurl character varying,
  author character varying,
  CONSTRAINT "pk-art" PRIMARY KEY (id)
)
WITH (OIDS=FALSE);
ALTER TABLE publisher.article OWNER TO postgres;

CREATE TABLE publisher.author
(
  id serial NOT NULL,
  "name" character varying,
  surname character varying,
  dateofjoining date,
  CONSTRAINT auth_pk PRIMARY KEY (id)
)
WITH (OIDS=FALSE);
ALTER TABLE publisher.author OWNER TO postgres;

CREATE TABLE publisher.author_article
(
  id_author bigint NOT NULL,
  id_article bigint NOT NULL,
  CONSTRAINT aut_art_pk PRIMARY KEY (id_author, id_article),
  CONSTRAINT art_fk FOREIGN KEY (id_article)
      REFERENCES publisher.article (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT aut_fk FOREIGN KEY (id_author)
      REFERENCES publisher.author (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE CASCADE
)
WITH (OIDS=FALSE);
ALTER TABLE publisher.author_article OWNER TO postgres;


CREATE TABLE publisher.users
(
  username character varying,
  "password" character varying,
  author_id bigint NOT NULL,
  CONSTRAINT pk PRIMARY KEY (author_id),
  CONSTRAINT auth_fk FOREIGN KEY (author_id)
      REFERENCES publisher.author (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT username UNIQUE (username)
)
WITH (OIDS=FALSE);
ALTER TABLE publisher.users OWNER TO postgres;

-----------------------------------------------------------------------------------


--Commons Inserts
insert into publisher.author(name,surname,DATEOFJOINING) values ('Armando','Ramirez','2011-12-12')
insert into publisher.users(username,password,author_id) values ('armandorv','secret',1)
insert into publisher.roles(user_id,role) values (1,'ROLE_AUTHOR')

insert into publisher.article (title,DATEOFCREATION,author,description,subject,filename,fileurl)
values ('mock','2011-12-12','armandorv','mock','subject','file','http://file')

--Commons Querys

select * from publisher.author
select * from publisher.users
select * from publisher.roles
select * from publisher.article
select * from publisher.author_article

--To get an user by user fully
select * from publisher.author a inner join publisher.users u on a.id = u.author_id 
inner join publisher.roles r on u.id= r.user_id

